
AK_SHARE_BACKEND = ${?AK_SHARE_BACKEND}
env = "development"


akka {
  http.server.default-host-header = "localhost"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "cluster"
  }

}

request-idle = 1 seconds

NOTION_AK=${?NOTION_AK}

ctx.default {
  host = ${?PG_HOST}
  port = ${?PG_PORT}
  user = ${?PG_USERNAME}
  password = ${?PG_PASSWORD}
  database =  ${?PG_DATABASE}
  poolMaxQueueSize = 4
  poolMaxObjects = 4
  poolMaxIdle = 999999999
  poolValidationInterval = 10000
}


email.host = ${?EMAIL_HOST}
email.port = 465
email.port = ${?EMAIL_PORT}
email.user_name  = ${?EMAIL_USER_NAME}
email.password  = ${?EMAIL_PASSWORD}


cache {
  memcached = ${?MEMCACHED}
}

memcachedcache= ${?MEMCACHED}

jdbc-journal {
  slick = ${slick}
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  slick = ${slick}
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  slick = ${slick}
}

# the akka-persistence-jdbc provider in use for durable state store
jdbc-durable-state-store {
  slick = ${slick}
}


slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    host = ${?PG_HOST}
    url = "jdbc:postgresql://"${PG_HOST}":"${PG_PORT}"/"${PG_DATABASE}"?reWriteBatchedInserts=true"
    user = ${?PG_USERNAME}
    password = ${?PG_PASSWORD}
    driver = "org.postgresql.Driver"
    numThreads = 5
    maxConnections = 5
    minConnections = 1
  }
}


akka.actor.serializers {
  kryo = "com.twitter.chill.akka.AkkaSerializer"
}

akka.actor.serialization-bindings {
  "java.io.Serializable" = kryo
}

akka.actor {
  # Set this to on to enable serialization-bindings defined in
  # additional-serialization-bindings. Those are by default not included
  # for backwards compatibility reasons. They are enabled by default if
  # akka.remote.artery.enabled=on.
  enable-additional-serialization-bindings = on

  allow-java-serialization = off
}
