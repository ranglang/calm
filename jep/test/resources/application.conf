

akka {
  test{
    filter-leeway = 10 seconds
    default-timeout = 12 seconds
  }
}
akka.test.default-timeout = 10.seconds
akka.test.single-expect-default = 10.seconds

//
//request-idle = 1 seconds
//
//env = "development"
//env = ${?ENV}
//
//akka.log-dead-letters=10
//
//akka {
//  loggers = ["akka.event.slf4j.Slf4jLogger"]
//  log-dead-letters=10
//  loglevel = "INFO"
//}
//
//cache {
//  memcached = ${?MEMCACHED}
//}
//
//ctx.default {
//  host = ${?PG_HOST}
//  port = ${?PG_PORT}
//  user = ${?PG_USERNAME}
//  password = ${?PG_PASSWORD}
//  database =  ${?PG_DATABASE}
//  poolMaxQueueSize = 4
//  poolMaxObjects = 4
//  poolMaxIdle = 999999999
//  poolValidationInterval = 10000
//}
//
//
//ctx {
//  host = ${?PG_HOST}
//  port = ${?PG_PORT}
//  user = ${?PG_USERNAME}
//  password = ${?PG_PASSWORD}
//  database =  ${?PG_DATABASE}
//  poolMaxQueueSize = 4
//  poolMaxObjects = 4
//  poolMaxIdle = 999999999
//  poolValidationInterval = 10000
//}
//
//
//email.host = ${?EMAIL_HOST}
//email.port = 465
//email.port = ${?EMAIL_PORT}
//email.user_name  = ${?EMAIL_USER_NAME}
//email.password  = ${?EMAIL_PASSWORD}
//
//trade.backend  = ${?TRADE_BACKEND}
//trade.user_name  = ${?TRADE_USERNAME}
//trade.ak  = ${?TRADE_AK}
//
//lqiong {
//  idle = 0 seconds
//  save-limit = 20 minutes
//}
//
//kamon {
//  environment.service = "Akka Application"
//  apm.api-key = "ad09jac94ethkkio24nmtl89tn"
//}
//
//
//akka {
//  http.server.default-host-header = "localhost"
//  loggers = ["akka.event.slf4j.Slf4jLogger"]
//  loglevel = "DEBUG"
//  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
//
//  actor {
//    provider = "cluster"
//  }
//
//}
//
//#management-config
//akka.management {
//  cluster.bootstrap {
//    contact-point-discovery {
//      # pick the discovery method you'd like to use:
//      discovery-method = kubernetes-api
//      required-contact-point-nr = 1
//      required-contact-point-nr = ${?REQUIRED_CONTACT_POINT_NR}
//    }
//  }
//}
//
//akka.actor.allow-java-serialization = true
//
//#management-config
//
//akka.management {
//  health-checks {
//    readiness-checks {
//      example-ready = "akka.sample.cluster.kubernetes.DemoHealthCheck"
//    }
//  }
//}
//
//
//akka.cluster.sharding {
//  # Number of shards used by the default HashCodeMessageExtractor
//  # when no other message extractor is defined. This value must be
//  # the same for all nodes in the cluster and that is verified by
//  # configuration check when joining. Changing the value requires
//  # stopping all nodes in the cluster.
//  number-of-shards = 100
//}
//
//akka.cluster.sharding.healthcheck.names = ["counter-1"]
//

//include "general.conf"
//akka.persistence.journal.plugin = "akka.persistence.r2dbc.journal"
//akka.persistence.snapshot-store.plugin = "akka.persistence.r2dbc.snapshot"
//akka.persistence.state.plugin = "akka.persistence.r2dbc.durable-state-store"





// general.conf is included only for shared settings used for the akka-persistence-jdbc tests
//include "general.conf"


jdbc-journal {
  slick = ${slick}
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  slick = ${slick}
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  slick = ${slick}
}

# the akka-persistence-jdbc provider in use for durable state store
jdbc-durable-state-store {
  slick = ${slick}
}


slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    host = ${?PG_HOST}
    url = "jdbc:postgresql://"${PG_HOST}":"${PG_PORT}"/"${PG_DATABASE}"?reWriteBatchedInserts=true"
    user = ${?PG_USERNAME}
    password = ${?PG_PASSWORD}
    driver = "org.postgresql.Driver"
    numThreads = 5
    maxConnections = 5
    minConnections = 1
  }
}



akka.persistence.journal.plugin = "akka.persistence.r2dbc.journal"
akka.persistence.snapshot-store.plugin = "akka.persistence.r2dbc.snapshot"
akka.persistence.state.plugin = "akka.persistence.r2dbc.state"

akka.persistence.r2dbc {
  dialect = "postgres"
  connection-factory {
    driver = "postgres"
    host = "localhost"
    host = ${?PG_HOST}
    port = ${?PG_PORT}
    database = "postgres"
    database = ${?PG_DATABASE}
    user = "postgres"
    user = ${?PG_USERNAME}
    password = "postgres"
    password = ${?PG_PASSWORD}

    # ssl {
    #   enabled = on
    #   mode = "VERIFY_CA"
    #   root-cert = "/path/db_root.crt"
    # }
  }
}


akka.persistence.r2dbc {
  journal {
    class = "akka.persistence.r2dbc.journal.R2dbcJournal"

    # name of the table to use for events
    table = "event_journal1"

    # event replay is using akka.persistence.r2dbc.query.buffer-size

  }
}

// #snapshot-settings

// #durable-state-settings

akka.persistence.r2dbc {
  snapshot {
    class = "akka.persistence.r2dbc.snapshot.R2dbcSnapshotStore"
    table = "snapshot1"
  }
}

// #durable-state-settings
akka.persistence.r2dbc {
  # Durable state store
  state {
    class = "akka.persistence.r2dbc.state.R2dbcDurableStateStoreProvider"

    table = "durable_state1"

    # When this is enabled the updates verifies that the revision is +1 of
    # previous revision. There might be a small performance gain if
    # this is disabled.
    assert-single-writer = on
  }
}


// #journal-settings
// #durable-state-settings
akka.persistence.r2dbc {
  # Durable state store

  state {
    class = "akka.persistence.r2dbc.state.R2dbcDurableStateStoreProvider"

    table = "durable_state"

    # When this is enabled the updates verifies that the revision is +1 of
    # previous revision. There might be a small performance gain if
    # this is disabled.
    assert-single-writer = on
  }
}


akka.actor.serializers {
  kryo = "com.twitter.chill.akka.AkkaSerializer"
}

akka.actor.serialization-bindings {
  "java.io.Serializable" = kryo
}

akka.actor {
  # Set this to on to enable serialization-bindings defined in
  # additional-serialization-bindings. Those are by default not included
  # for backwards compatibility reasons. They are enabled by default if
  # akka.remote.artery.enabled=on.
  enable-additional-serialization-bindings = on

  allow-java-serialization = off
}


kamon {
  environment.service = "claim"
  apm.api-key = "td53tj0chle0pd5pdan6iv9uss"
}



//// general.conf is included only for shared settings used for the akka-persistence-jdbc tests
//include "general.conf"


jdbc-journal {
  slick = ${slick}
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  slick = ${slick}
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  slick = ${slick}
}
